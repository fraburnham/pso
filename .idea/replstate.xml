<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1420578406670">{:repl-history {:ide [], :local [&quot;(pso swarm 0.01 fit 100)&quot; &quot;(defn fit [position]\n      (- 1 (reduce + position)))&quot; &quot;(def swarm (generate-swarm space 50 fit))&quot; &quot;(best swarm)&quot; &quot;(pso space swarm 0.01 fit 100)&quot; &quot;(time)&quot; &quot;(time (pso space swarm 0.01 fit 100))&quot; &quot;(time (pso space swarm 0.0 fit 1000))&quot; &quot;(time (pso space swarm 0.000001 fit 1000))&quot; &quot;(time (pso space swarm 0.00001 fit 10000))&quot; &quot;(time (pso space swarm 0.001 fit 10000))&quot; &quot;(map #(println (first (last %))) swarm)&quot; &quot;(map #(println %) swarm)&quot; &quot;(time (pso space swarm 0.001 fit 100))&quot; &quot;(time (pso space swarm 0.001 fit 1000))&quot; &quot;(time (pso space swarm 0.01 fit 100 :chart true))&quot; &quot;(time (pso space swarm 0.01 fit 100 :chart? true))&quot; &quot;(pso space swarm 0.001 fit 1000)&quot; &quot;(+ 0.334 0.664)&quot; &quot;(best (take 10 (pso space swarm 0.001 fit 100)))&quot; &quot;(best (repeatedly 10 #(pso space swarm 0.001 fit 100)))&quot; &quot;(reduce +' '(0.2129634308327013 0.787149094261017))&quot; &quot;(def space [[-1 1] [-1 1] [-1 1] [-1 1]])&quot; &quot;(def swarm (generate-swarm space 40 fit))&quot; &quot;(pso space swarm 0.001 fit 100)&quot; &quot;(generate-swarm [[-1 1] [-1 1]] 40 (apply +))&quot; &quot;(generate-swarm [[-1 1] [-1 1]] 40 (partial apply +))&quot; &quot;(def swarm (generate-swarm [[-1 1] [-1 1]] 40 (partial apply +)))&quot; &quot;(pso space swarm 0.01 (partial apply +) 1000)&quot; &quot;(pso space swarm 0.0001 (partial apply +) 1000)&quot; &quot;(pso space swarm 0.00001 (partial apply +) 100)&quot; &quot;(def swarm (generate-swarm [[-1 1] [-1 1]] 400 (partial apply +)))&quot; &quot;(def swarm (generate-swarm [[-1 1] [-1 1]] 100 (partial apply +)))&quot; &quot;(pso space swarm 0.000001 (partial apply +) 1000)&quot; &quot;(pso space swarm 0.00001 (partial apply +) 1000)&quot; &quot;(reduce + '(0.07656969934862287 -0.07656799542183029))&quot; &quot;(int (reduce + '(0.07656969934862287 -0.07656799542183029)))&quot; &quot;(map (partial * 0.5) (reduce + '(2 5) '(2 3)))&quot; &quot;(map (partial * 0.5) (reduce (partial apply +) '(2 5) '(2 3)))&quot; &quot;(reduce #(+ %1 %2 %3) '(2 5) '(2 3))&quot; &quot;(map + '(2 5) '(2 3))&quot; &quot;(map (partial * 0.5) (map + '(2 5) '(2 3)))&quot; &quot;(def space [[-1 1] [-1 1] [-1 1] [-1 1] [-10 7]])&quot; &quot;(pso space swarm 0.1 0.001 (partial apply +) 100)&quot; &quot;(def space [[-10 10] [-10 10]])&quot; &quot;(def swarm (p/generate-swarm space 40 (partial apply +)))&quot; &quot;(pso space swarm 0.1 0.001 (partial apply +) 100 :chart? true)&quot; &quot;(def swarm (p/generate-swarm space 40 (partial - 1)))&quot; &quot;(def swarm (p/generate-swarm space 40 (partial apply partial - 1)))&quot; &quot;(pso space swarm 0.25 0.001 (partial apply +) 100)&quot; &quot;(p/random -1 1)&quot; &quot;(repeatedly 100 #(p/random -1 1))&quot; &quot;(def swarm (p/generate-swarm space 60 (partial apply +)))&quot; &quot;(pso space swarm 0.5 0.001 (partial apply +) 100 :chart? true)&quot; &quot;(pso space swarm 0.1 0.00001 (partial apply +) 100 :chart? true)&quot; &quot;(pso space swarm 0.1 0.0000001 (partial apply +) 100 :chart? true)&quot; &quot;(pso space swarm 0.1 0 (partial apply +) 100 :chart? true)&quot; &quot;(pso space swarm 0.1 0.00001 (partial apply +) 20 :chart? true)&quot; &quot;(pso space swarm 0.1 0.0000000000001 (partial apply +) 20 :chart? true)&quot; &quot;(pso space swarm 0.5 0.0000000000001 (partial apply +) 20 :chart? true)&quot; &quot;(pso space swarm 0.1 0.0000001 (partial apply +) 20 :chart? true)&quot; &quot;(pso space swarm 0.1 0.0000001 (partial apply +) 200)&quot; &quot;(pso space swarm 0.01 0.0000001 (partial apply +) 200)&quot; &quot;(pso space swarm 0.01 0.0000000001 (partial apply +) 200)&quot; &quot;(pso space swarm 0.1 0.0000000001 (partial apply +) 1000)&quot; &quot;(pso space swarm 0.01 0.0000000001 (partial apply +) 1000)&quot; &quot;(pso space swarm 0.001 0.0000000001 (partial apply +) 1000)&quot; &quot;(pso space swarm 0.001 0.00001 (partial apply +) 1000)&quot; &quot;(defn fit [position]\n  (Math/pow (- 1 (reduce + position)) 2))&quot; &quot;(pso space swarm 0.01 0.000001 fit 100)&quot; &quot;(pso space swarm 0.1 0.000001 fit 100)&quot; &quot;(pso space swarm 0.1 0 fit 100 :chart? true)&quot; &quot;(def space [[-1 1] [-1 1]])&quot; &quot;(defn fit [position]\n  (Math/pow (- 1 (reduce + position)) 2))\n(def swarm (p/generate-swarm space 100 fit))&quot; &quot;(pso space swarm 0.1 0.00000001 fit 100 :chart? true)&quot; &quot;(pso space swarm 0.1 0.0001 fit 100 :chart? true)&quot; &quot;(defn fit [position] (apply + position))&quot; &quot;(require '[pso.core :as p])&quot; &quot;(defn move [space position velocity]\n  (map (fn [p v s]\n         (let [p (+ p v)]\n           (cond (&gt; p (last s)) (p/random (first s) (last s))\n                 (&lt; p (first s)) (p/random (first s) (last s))\n                 :else p)))\n       position velocity space))&quot; &quot;space&quot; &quot;fit&quot; &quot;swarm&quot; &quot;(def swarm (generate-swarm space 10 fit))&quot; &quot;(pso space swarm 0.01 0.0000001 fit 100)&quot; &quot;(pso space swarm 0.01 0.0000001)&quot; &quot;(pso space swarm 0.01 0.0000001 (partial apply +))&quot; &quot;(pso space swarm 0.01 0.0000001 (partial apply +) 100)&quot; &quot;(def swarm (p/generate-swarm space 10 fit))&quot; &quot;(pso space swarm 0.01 0.0000001 fit 100 :chart? true)&quot; &quot;(def space [[-1 1] [-1 1] [-1 1] [-1 1] [-1 1]])&quot; &quot;(def swarm (p/generate-swarm space 40 fit))&quot; &quot;(pso space swarm 0.01 0.000001 fit 100 :chart? true)&quot; &quot;(pso space swarm 0.1 0.000001 fit 100 :chart? true)&quot; &quot;(def space [[-1 1] [-1 1] [-1 1]])&quot; &quot;(def swarm (p/generate-swarm space 100 fit))&quot; &quot;(pso space swarm 0.01 0.000001 fit 1000 :chart? true)&quot; &quot;(pso space swarm 0.1 0.000001 fit 1000 :chart? true)&quot; &quot;(pso space swarm 1 0.000001 fit 1000 :chart? true)&quot; &quot;(pso space swarm 0.001 0.000001 fit 1000 :chart? true)&quot; &quot;(def p/chart (icharts/scatter-plot 0 0 :title \&quot;Error\&quot;))&quot; &quot;(def fit (partial apply +))&quot;], :remote []}}</component>
</project>

