<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1420505783908">{:repl-history {:ide [], :local [&quot;(generate-swarm space 100)&quot; &quot;(mod 1 100)&quot; &quot;(mod 1 10)&quot; &quot;(- 10 (mod 1 10))&quot; &quot;(mod (- 10 1) 100)&quot; &quot;(mod (- 10 1) 10)&quot; &quot;(mod (+ 10 1) 10)&quot; &quot;(defn fit-sum-to-one [position]\n  (Math/abs (- 1 (map + position))))&quot; &quot;(pso (generate-swarm [[-1 1] [-1 1]] 40 fit-sum-to-one) 0.01 fit-sum-to-one 1000)&quot; &quot;(defn fit-sum-to-one [position]\n  (println \&quot;OHMYGERD FIT SUM TO ONE\&quot;)\n  (Math/abs (- 1 (map + position))))&quot; &quot;(generate-swarm [[-1 1] [-1 1]] 40 fit-sum-to-one)&quot; &quot;(random-particle [[-1 1] [-1 1]])&quot; &quot;(repeatedly 40 #(random-particle [[-1 1] [-1 1]]))&quot; &quot;(def swarm (repeatedly 40 #(random-particle [[-1 1] [-1 1]])))&quot; &quot;(map (fn [[_ v p]] [(fit-sum-to-one p) v p]) swarm)&quot; &quot;(map (fn [[_ v p]] [p v p]) swarm)&quot; &quot;(defn fit-sum-to-one [position]\n  (println \&quot;OHMYGERD FIT SUM TO ONE\&quot;)\n  (println position)\n  (Math/abs (- 1 (map + position))))&quot; &quot;(defn fit-sum-to-one [position]\n  (println \&quot;OHMYGERD FIT SUM TO ONE\&quot;)\n  (println position)\n  (Math/abs (- 1 (reduce + position))))&quot; &quot;(fit-sum-to-one '(-0.27035474886584265 -0.5164239524304706))&quot; &quot;(fit-sum-to-one '(0.5 0.5))&quot; &quot;(update-fitness swarm fit-sum-to-one)&quot; &quot;(def swarm (update-fitness swarm fit-sum-to-one))&quot; &quot;(defn fit-sum-to-one [position]\n  (- 1 (reduce + position)))&quot; &quot;(generate-swarm space 40 fit-sum-to-one)&quot; &quot;(fit-sum-to-one [-0.5 1])&quot; &quot;(fit-sum-to-one [-0.25 1])&quot; &quot;(fit-sum-to-one [-0.0 1])&quot; &quot;(neighborhood-swarm 1 swarm)&quot; &quot;(neighborhood-swarm 39 swarm)&quot; &quot;(neighborhood-swarm 40\n                    swarm)&quot; &quot;(neighborhood-swarm 0\n                    swarm)&quot; &quot;(def global-best (best swarm))&quot; &quot;(def local-best (best neighborhood))&quot; &quot;global-best&quot; &quot;local-best&quot; &quot;(def particle (nth swarm 0))&quot; &quot;particle&quot; &quot;(update-particle particle global-best local-best fit-sum-to-one)&quot; &quot;(pso (generate-swarm [[-1 1] [-1 1]] 40 fit-sum-to-one) 0.01 fit-sum-to-one 100)&quot; &quot;(defn fit-sum-to-one [position]\n  (Math/abs (- 1 (reduce + position))))&quot; &quot;(def swarm (pso (generate-swarm [[-1 1] [-1 1]] 40 fit-sum-to-one) 0.01 fit-sum-to-one 100))&quot; &quot;(first swarm)&quot; &quot;(first (pso (generate-swarm [[-1 1] [-1 1]] 40 fit-sum-to-one) 0.01 fit-sum-to-one 1000))&quot; &quot;(defn fit [position]\n  (- 1 (reduce + position)))&quot; &quot;(def swarm (generate-swarm [[-1 1] [-1 1]] 40 fit))&quot; &quot;(def neighborhood (neighborhood-swarm 0 swarm))&quot; &quot;neighborhood&quot; &quot;(count neighborhood)&quot; &quot;(type neighborhood)&quot; &quot;(pso.core/best neighborhood)&quot; &quot;(defn best [swarm] ;modify this to sort to closest to zero\n  (first (sort-by first (fn [x] (Math/abs x)) swarm)))&quot; &quot;(best neighborhood)&quot; &quot;(def fit [position] (- 1 (reduce + position)))&quot; &quot;asdf&quot; &quot;(defn space [[-1 1] [-1 1]])&quot; &quot;(first (pso swarm 0.01 fit 10))&quot; &quot;(first (pso swarm 0.01 fit 1000))&quot; &quot;(first (pso swarm 0.01 fit 10000))&quot; &quot;(def swarm )&quot; &quot;(map #(println (last %)) final-swarm)&quot; &quot;(map #(println (first %)) final-swarm)&quot; &quot;(def final-swarm (pso swarm 0.01 fit 1000))&quot; &quot;(best final-swarm)&quot; &quot;(def fit [position] (Math/abs (- 1 (reduce + position))))&quot; &quot;(defn fit [position] (Math/abs (- 1 (reduce + position))))&quot; &quot;(def final-swarm (pso swarm 0.01 fit 10))&quot; &quot;final-swarm&quot; &quot;(defn fit [position] (- 1 (reduce + position)))&quot; &quot;(generate-swarm space 10 fit)&quot; &quot;(def swarm (generate-swarm space 10 fit))&quot; &quot;(pso swarm 0.01 fit 10)&quot; &quot;(defn fit [position] (- 10 (reduce + position)))&quot; &quot;(def swarm (generate-swarm space 100 fit))&quot; &quot;(pso swarm 0.01 fit 100)&quot; &quot;(def space [[-1 1] [-1 1]])&quot; &quot;(defn fit [position]\n      (- 1 (reduce + position)))&quot; &quot;(def swarm (generate-swarm space 50 fit))&quot; &quot;swarm&quot; &quot;(best swarm)&quot; &quot;(pso space swarm 0.01 fit 100)&quot; &quot;(time)&quot; &quot;(time (pso space swarm 0.01 fit 100))&quot; &quot;(time (pso space swarm 0.0 fit 1000))&quot; &quot;(time (pso space swarm 0.000001 fit 1000))&quot; &quot;(time (pso space swarm 0.00001 fit 10000))&quot; &quot;(time (pso space swarm 0.001 fit 10000))&quot; &quot;(map #(println (first (last %))) swarm)&quot; &quot;(map #(println %) swarm)&quot; &quot;(time (pso space swarm 0.001 fit 100))&quot; &quot;(time (pso space swarm 0.001 fit 1000))&quot; &quot;(time (pso space swarm 0.01 fit 100 :chart true))&quot; &quot;(time (pso space swarm 0.01 fit 100 :chart? true))&quot; &quot;(pso space swarm 0.001 fit 1000)&quot; &quot;(+ 0.334 0.664)&quot; &quot;(best (take 10 (pso space swarm 0.001 fit 100)))&quot; &quot;(best (repeatedly 10 #(pso space swarm 0.001 fit 100)))&quot; &quot;(reduce +' '(0.2129634308327013 0.787149094261017))&quot; &quot;(def space [[-1 1] [-1 1] [-1 1]])&quot; &quot;(def space [[-1 1] [-1 1] [-1 1] [-1 1]])&quot; &quot;(def swarm (generate-swarm space 40 fit))&quot; &quot;(pso space swarm 0.001 fit 100)&quot;], :remote []}}</component>
</project>

